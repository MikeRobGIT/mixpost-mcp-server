---
description: TypeScript patterns and type safety for the Mixpost MCP Server
globs: src/**/*.ts,*.ts
---

# TypeScript Development Patterns

## Type Definitions

All types are centralized in [types.ts](mdc:src/types.ts):

- Request/response interfaces
- API error types
- Pagination structures
- Mixpost-specific data models

## Type Safety Patterns

### API Error Handling

```typescript
interface ApiError {
  status: number;
  message: string;
  errors?: Record<string, string[]>;
}

// Type guard for API errors
function isApiError(error: unknown): error is ApiError {
  return error instanceof Error && 'status' in error;
}
```

### Request Validation

Use strict typing for API parameters:

```typescript
interface CreatePostRequest {
  versions: Array<{
    account_id: number;  // Integer, not string
    is_original: boolean;
    content: {
      body: string;
      media: string[];
      urls: string[];
    };
  }>;
}
```

### Environment Variables

Type environment variables properly:

```typescript
interface MixpostConfig {
  baseUrl: string;
  workspaceUuid: string;
  apiKey: string;
  corePath?: string;
}
```

## Validation Patterns

### UUID Validation

```typescript
function validateUuid(uuid: string): boolean {
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  return uuidRegex.test(uuid);
}
```

### Date/Time Validation

```typescript
function validateDateFormat(date: string): boolean {
  const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
  return dateRegex.test(date);
}

function validateTimeFormat(time: string): boolean {
  const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
  return timeRegex.test(time);
}
```

## Import/Export Patterns

- Use named exports for better tree-shaking
- Group related types in interfaces
- Export types from [types.ts](mdc:src/types.ts) for reuse

## Error Handling with Types

```typescript
try {
  const result = await apiCall();
  return { success: true, data: result };
} catch (error) {
  if (isApiError(error)) {
    return { success: false, error: error.message };
  }
  throw error;
}
```

